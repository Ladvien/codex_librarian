# ==============================================================================
# PDF to Markdown MCP Server - Environment Configuration
# ==============================================================================
# Copy this file to .env and customize the values for your environment.
# All settings have reasonable defaults but should be configured for production.

# ==============================================================================
# APPLICATION SETTINGS
# ==============================================================================
APP_NAME="PDF to Markdown MCP Server"
APP_VERSION="0.1.0"
DEBUG=false
HOST=0.0.0.0
PORT=8000
RELOAD=false

# ==============================================================================
# DATABASE CONFIGURATION (PostgreSQL with PGVector)
# ==============================================================================
# PostgreSQL connection settings
DB_HOST=localhost
DB_PORT=5432
DB_NAME=pdf_to_markdown_mcp
DB_USER=pdf_user
DB_PASSWORD=your_secure_password_here

# Database connection pool settings
DB_POOL_SIZE=15
DB_MAX_OVERFLOW=30
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600
DB_POOL_PRE_PING=true

# Database connection and retry settings
DB_CONNECT_TIMEOUT=10
DB_MAX_RETRIES=3
DB_RETRY_DELAY=1.0
DB_RETRY_BACKOFF_FACTOR=2.0

# SQL debugging (set to true for development only)
SQL_ECHO=false

# Full DATABASE_URL (overrides individual settings above if provided)
# DATABASE_URL=postgresql://pdf_user:password@localhost:5432/pdf_to_markdown_mcp

# PGVector configuration
# Ensure PostgreSQL has the pgvector extension installed
# CREATE EXTENSION IF NOT EXISTS vector;
PGVECTOR_ENABLED=true

# ==============================================================================
# REDIS CONFIGURATION (Celery Broker & Result Backend)
# ==============================================================================
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=""

# Celery-specific Redis URLs (will use Redis settings above if not specified)
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# ==============================================================================
# CELERY TASK QUEUE CONFIGURATION
# ==============================================================================
# GPU-Optimized Worker settings
CELERY_WORKER_CONCURRENCY=1
CELERY_WORKER_POOL=solo
CELERY_WORKER_MAX_TASKS_PER_CHILD=100
CELERY_TASK_SOFT_TIME_LIMIT=600
CELERY_TASK_TIME_LIMIT=900

# GPU Memory Management
CUDA_DEVICE_ORDER=PCI_BUS_ID
CUDA_VISIBLE_DEVICES=0
PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512

# Task routing (JSON format for complex routes)
CELERY_TASK_ROUTES='{
  "pdf_to_markdown_mcp.worker.tasks.process_pdf": {"queue": "pdf_processing"},
  "pdf_to_markdown_mcp.worker.tasks.generate_embeddings": {"queue": "embeddings"},
  "pdf_to_markdown_mcp.worker.tasks.batch_process": {"queue": "batch_processing"},
  "pdf_to_markdown_mcp.worker.tasks.cleanup_files": {"queue": "maintenance"}
}'

# Queue priorities
CELERY_TASK_DEFAULT_PRIORITY=5
CELERY_HIGH_PRIORITY_QUEUE=pdf_processing
CELERY_NORMAL_PRIORITY_QUEUE=embeddings
CELERY_LOW_PRIORITY_QUEUE=maintenance

# ==============================================================================
# MINERU PDF PROCESSING CONFIGURATION
# ==============================================================================
# Processing limits
MAX_FILE_SIZE_MB=500
PROCESSING_TIMEOUT_SECONDS=300

# MinerU-specific settings
MINERU_OCR_LANGUAGE=eng
MINERU_PRESERVE_LAYOUT=true
MINERU_EXTRACT_IMAGES=true
MINERU_EXTRACT_TABLES=true
MINERU_EXTRACT_FORMULAS=true

# GPU Acceleration (requires CUDA-enabled PyTorch)
# Options: "cpu", "cuda", "mps" (Mac), "npu" (Huawei)
# Auto-detects if not set; set explicitly to override
# MINERU_DEVICE_MODE=cuda

# Content processing
CHUNK_SIZE=1000
CHUNK_OVERLAP=200
CHUNK_BOUNDARY_STRATEGY=sentence

# Multi-language OCR support (comma-separated)
# Supported: eng, chi_sim, chi_tra, fra, deu, spa, jpn, kor
OCR_LANGUAGES=eng,fra,deu,spa

# ==============================================================================
# EMBEDDING GENERATION CONFIGURATION
# ==============================================================================
# Primary embedding provider: "ollama" (local) or "openai" (API)
EMBEDDING_PROVIDER=ollama
EMBEDDING_MODEL=nomic-embed-text
EMBEDDING_DIMENSIONS=1536
EMBEDDING_BATCH_SIZE=32

# Ollama settings (local embeddings)
OLLAMA_URL=http://localhost:11434
OLLAMA_MODEL=nomic-embed-text
OLLAMA_TIMEOUT=60
OLLAMA_RETRIES=3

# OpenAI settings (cloud embeddings)
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL=text-embedding-ada-002
OPENAI_TIMEOUT=30
OPENAI_MAX_RETRIES=3

# Embedding processing settings
EMBEDDING_NORMALIZE=true
EMBEDDING_SIMILARITY_METRIC=cosine

# ==============================================================================
# FILE STORAGE PATHS
# ==============================================================================
# Temporary processing directory
TEMP_DIR=/tmp/pdf_to_markdown_mcp

# Storage settings
MAX_STORAGE_GB=100
CLEANUP_OLD_FILES_DAYS=30

# ==============================================================================
# FILE SYSTEM MONITORING (Watchdog)
# ==============================================================================
# Directories to monitor for new PDF files (JSON array format)
# Single directory:     WATCH_DIRECTORIES='["/mnt/codex_fs/research/"]'
# Multiple directories: WATCH_DIRECTORIES='["/path/one", "/path/two", "/path/three"]'
# Note: MCP clients can update this at runtime via /api/v1/configure endpoint
WATCH_DIRECTORIES='["/mnt/codex_fs/research/"]'

# Output directory for processed markdown files
OUTPUT_DIRECTORY=/mnt/codex_fs/research/librarian_output/

# File patterns to monitor (JSON array format)
FILE_PATTERNS='["*.pdf", "*.PDF"]'

# Monitoring settings
WATCH_RECURSIVE=true
DEBOUNCE_SECONDS=2.0
FILE_STABILITY_TIMEOUT=5

# Processing settings
QUEUE_BATCH_SIZE=10
AUTO_PROCESS_NEW_FILES=true
DUPLICATE_DETECTION=true

# ==============================================================================
# DIRECTORY INDEXER CONFIGURATION
# ==============================================================================
# Initial directory scan on startup - catalogs all PDFs in watch directories
INDEXER_INITIAL_INDEX_ON_STARTUP=true

# Batch size for database inserts during indexing (10-1000)
INDEXER_INDEX_BATCH_SIZE=100

# Periodic resync interval (minutes) - compares filesystem vs database state
# Detects new files, deleted files, and modified files
INDEXER_RESYNC_INTERVAL_MINUTES=30

# Skip files that are already successfully processed (status='completed')
# Set to false to re-process all files regardless of status
INDEXER_SKIP_EXISTING_COMPLETED=true

# Handle files that were deleted from filesystem
# If true, marks database records as deleted when file no longer exists
INDEXER_HANDLE_DELETED_FILES=true

# ==============================================================================
# API RATE LIMITING
# ==============================================================================
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000
RATE_LIMIT_BURST=10

# API key for authenticated access (optional)
API_KEY=""
REQUIRE_AUTH=false

# ==============================================================================
# CORS CONFIGURATION
# ==============================================================================
# CORS origins (JSON array format)
CORS_ORIGINS='["*"]'
CORS_CREDENTIALS=true
CORS_METHODS='["GET", "POST", "PUT", "DELETE", "OPTIONS"]'
CORS_HEADERS='["*"]'

# ==============================================================================
# LOGGING CONFIGURATION
# ==============================================================================
LOG_LEVEL=INFO
LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# File logging (optional)
LOG_FILE=""
LOG_MAX_FILE_SIZE_MB=100
LOG_BACKUP_COUNT=5

# Structured logging for production
STRUCTURED_LOGGING=false
LOG_TO_STDOUT=true

# Component-specific log levels
LOG_LEVEL_DATABASE=WARNING
LOG_LEVEL_CELERY=INFO
LOG_LEVEL_MINERU=INFO
LOG_LEVEL_EMBEDDINGS=INFO

# ==============================================================================
# MONITORING & HEALTH CHECKS
# ==============================================================================
# Health check endpoints
ENABLE_HEALTH_CHECKS=true
HEALTH_CHECK_TIMEOUT=10

# Metrics and monitoring
ENABLE_METRICS=true
METRICS_PORT=9090
PROMETHEUS_ENABLED=false

# Performance monitoring
ENABLE_PROFILING=false
PROFILING_SAMPLE_RATE=0.1

# ==============================================================================
# SECURITY CONFIGURATION
# ==============================================================================
# Security headers
ENABLE_SECURITY_HEADERS=true
ENABLE_HTTPS_REDIRECT=false

# File upload security
MAX_UPLOAD_SIZE_MB=500
ALLOWED_FILE_TYPES='["application/pdf"]'
SCAN_UPLOADED_FILES=true

# Input validation
STRICT_VALIDATION=true
SANITIZE_FILENAMES=true

# ==============================================================================
# DEVELOPMENT & TESTING SETTINGS
# ==============================================================================
# Testing configuration
TEST_DATABASE_URL=sqlite:///test.db
TEST_SKIP_SLOW=false
TEST_PARALLEL=false

# ==============================================================================
# ADVANCED CONFIGURATION
# ==============================================================================
# Worker scaling
AUTO_SCALE_WORKERS=false
MIN_WORKERS=1
MAX_WORKERS=8

# Memory management
MAX_MEMORY_USAGE_MB=2048
MEMORY_CLEANUP_INTERVAL=300

# Performance tuning
ASYNC_POOL_SIZE=100
CONNECTION_POOL_SIZE=20
CACHE_TTL_SECONDS=3600

# Error handling
MAX_RETRIES=3
RETRY_DELAY_SECONDS=5
EXPONENTIAL_BACKOFF=true

# ==============================================================================
# EXTERNAL SERVICE INTEGRATIONS
# ==============================================================================
# Optional webhook notifications
WEBHOOK_URL=""
WEBHOOK_SECRET=""
WEBHOOK_EVENTS='["processing_complete", "error"]'

# Optional Slack notifications
SLACK_WEBHOOK_URL=""
SLACK_CHANNEL=""

# Optional email notifications
SMTP_HOST=""
SMTP_PORT=587
SMTP_USER=""
SMTP_PASSWORD=""
NOTIFICATION_EMAIL=""

# ==============================================================================
# DEPLOYMENT-SPECIFIC SETTINGS
# ==============================================================================
# Environment identifier
ENVIRONMENT=development

# Container/Docker settings
CONTAINER_NAME=pdf-to-markdown-mcp
CONTAINER_RESTART_POLICY=unless-stopped

# Load balancer health check
HEALTH_CHECK_PATH=/health
READINESS_CHECK_PATH=/ready

# ==============================================================================
# NOTES
# ==============================================================================
# 1. Copy this file to .env and customize the values
# 2. Never commit the .env file to version control
# 3. Use strong passwords and API keys in production
# 4. Configure PostgreSQL with pgvector extension before first run
# 5. Ensure Redis server is running for Celery functionality
# 6. For production, set DEBUG=false and configure proper logging
# 7. Monitor file system permissions for input/output directories
# 8. Configure firewall rules for database and Redis connections
# 9. Set up SSL/TLS certificates if using HTTPS
# 10. Review and adjust rate limits based on expected usage