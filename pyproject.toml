[project]
name = "pdf-to-markdown-mcp"
version = "0.1.0"
description = "PDF to Markdown MCP Server that converts PDFs to searchable Markdown with vector embeddings stored in PostgreSQL with PGVector."
authors = [
    {name = "C. Thomas Brittain", email = "cthomasbrittain@yahoo.com"}
]
license = {text = "GPL-3.0-or-later"}
readme = "README.md"
requires-python = ">=3.11,<3.14"
keywords = ["pdf", "markdown", "mcp", "vector", "embeddings", "postgresql", "mineru"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: Markdown",
]

dependencies = [
    # Core MCP Server Dependencies - Pinned for stability
    "fastapi==0.117.1", # Exact: Critical for API compatibility
    "pydantic[email]==2.11.9", # Exact: Ensures serialization consistency
    "pydantic-settings~=2.6.1", # Compatible: Config parsing is stable
    "uvicorn[standard]~=0.30.6", # Compatible: ASGI server updates OK
    # IMPORTANT: transformers pinned to 4.45.2 for MinerU 2.0.6 compatibility
    # MinerU formula recognition fails with transformers>=4.46 due to cache_position parameter
    # See [tool.uv] section below for dependency override
    "transformers==4.45.2", # Exact: MinerU MFR model compatibility
    "tokenizers>=0.20,<0.21", # Compatible: Required by transformers 4.45.2
    # Database & Vector Storage - Conservative pinning for data integrity
    "sqlalchemy==2.0.43", # Exact: Major version boundary, ORM changes
    "psycopg2-binary~=2.9.9", # Compatible: Mature PostgreSQL driver
    "pgvector==0.4.1", # Exact: Specialized extension, breaking changes likely
    "alembic~=1.13.3", # Compatible: Migration tool, stable API
    # PDF Processing - Exact for consistent output
    "mineru[core]==2.0.6", # Exact: Core functionality with ML dependencies, output consistency critical
    # Task Queue & Background Processing - Stable, allow updates
    "celery~=5.5.3", # Compatible: Mature task queue system
    "redis~=5.2.0", # Compatible: Stable key-value store
    # AI/ML & Embeddings - Mixed strategy based on stability
    "ollama>=0.3.3", # Compatible: Allow updates for dependency resolution
    "openai>=1.70.0,<2", # Compatible: Required by mineru[core]==2.0.6
    "numpy~=2.1.3", # Compatible: Computational library, stable
    "scipy~=1.14.1", # Compatible: Scientific computing, mature
    # File System Monitoring - Allow updates
    "watchdog~=6.0.0", # Compatible: File system events, stable API
    # Utilities - Most can be updated safely
    "rich~=13.9.4", # Compatible: CLI formatting, stable API
    "click~=8.1.7", # Compatible: CLI framework, very stable
    "requests~=2.32.3", # Compatible: HTTP client, security updates important
    "structlog~=24.4.0", # Compatible: Logging framework, stable
    "aiofiles~=24.1.0", # Compatible: Async file I/O, simple API
    # hashlib-compat removed - package not found in registry
    # streamlit removed - not used in MCP server, template artifact
    "psutil>=7.1.0",
    "python-dotenv (>=1.1.1,<2.0.0)",
    "paddlepaddle-gpu>=2.6.2",
    # GPU and ML Dependencies - Critical for performance
    "torch>=2.8.0", # PyTorch with CUDA support for GPU acceleration
    "torchvision>=0.23.0", # Vision utilities for PyTorch
    "nvidia-ml-py>=13.580.0", # Replacement for deprecated pynvml
    "prometheus-client>=0.23.1",
    # MCP Server Framework - For semantic search tool
    "fastmcp>=2.3.0",  # Compatible: FastMCP server framework
    "asyncpg>=0.29.0",  # Compatible: Async PostgreSQL driver for MCP server
]

[project.urls]
Homepage = "https://github.com/Ladvien/pdf-to-markdown-mcp"
Repository = "https://github.com/Ladvien/pdf-to-markdown-mcp"
Documentation = "https://pdf-to-markdown-mcp.readthedocs.io/en/latest/"

[project.optional-dependencies]
dev = [
    # Code Quality & Linting - Pinned for consistent CI/CD
    "ruff==0.13.1",             # Exact: Consistent linting rules across team
    "black==25.1.0",            # Exact: Consistent code formatting
    "mypy==1.18.2",             # Exact: Type checking consistency
    "bandit[toml]~=1.8.6",        # Compatible: Security linting, updates OK
    "pre-commit~=4.3.0",          # Compatible: Git hooks, stable API

    # Testing Framework - Allow patch updates for bug fixes
    "pytest~=8.4.2",             # Compatible: Test runner, stable API
    "pytest-asyncio~=0.24.0",     # Compatible: Async test support
    "pytest-cov~=6.0.0",         # Compatible: Coverage reporting
    "pytest-mock~=3.14.0",       # Compatible: Mocking utilities
    "pytest-xdist~=3.6.0",       # Compatible: Parallel testing
    "httpx~=0.28.1",             # Compatible: HTTP client for testing

    # Development Utilities
    "ipython~=8.30.0",           # Compatible: Interactive shell
    "watchfiles~=0.24.0",        # Compatible: File watching for dev
    # jupyter removed - not used in MCP server development

    # Type Stubs - Exact versions to match runtime dependencies
    "types-requests==2.32.0.20241016",  # Exact: Must match requests version
    "types-redis==4.6.0.20241004",      # Exact: Must match redis version
    "types-psycopg2==2.9.21.20240819",  # Exact: Must match psycopg2 version

    # Documentation - Commented out unless actively maintained
    # "sphinx~=8.1.3",          # Uncomment if maintaining docs
    # "myst-parser~=4.0.1",     # Uncomment for Markdown in Sphinx
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
pdf-to-markdown-mcp = "pdf_to_markdown_mcp.main:app"

# Note: Poetry tasks have been removed in migration to uv
# Development commands can now be run directly:
# - Dev server: uvicorn pdf_to_markdown_mcp.main:app --reload --host 0.0.0.0 --port 8000
# - Tests: pytest -v --cov=pdf_to_markdown_mcp --cov-report=html --cov-report=term
# - Linting: ruff check src/ tests/ --fix
# - Formatting: black src/ tests/
# - Type checking: mypy src/pdf_to_markdown_mcp/
# - Security: bandit -r src/pdf_to_markdown_mcp/
# - DB upgrade: alembic upgrade head
# - DB downgrade: alembic downgrade -1
# - Documentation: sphinx-build docs/source docs/build/html

# Ruff Configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FBT", # flake8-boolean-trap
    "PLR", # pylint-refactor
    "PLW", # pylint-warning
    "PIE", # flake8-pie
    "RUF", # ruff-specific
]
ignore = [
    "E501", # Line too long, handled by black
    "B008", # Do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raise without from inside except
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "alembic/versions",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["PLR2004", "S101", "TID252"]

# Black Configuration
[tool.black]
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | alembic/versions
)/
'''

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "mineru.*",
    "pgvector.*",
    "celery.*",
    "redis.*",
    "ollama.*"
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit Configuration
[tool.bandit]
targets = ["src/pdf_to_markdown_mcp"]
exclude_dirs = ["tests", "alembic"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*test_*.py"]

[dependency-groups]
dev = [
    "pytest-asyncio>=0.24.0",
    "pytest-mock>=3.14.1",
    "ruff>=0.13.1",
]

# UV Configuration
[tool.uv]
# Override MinerU's incorrect transformers dependency declaration
# MinerU 2.0.6 declares transformers>=4.51.1 but actually requires <4.46
# to avoid cache_position parameter errors in UnimerMBART model
override-dependencies = ["transformers==4.45.2"]
